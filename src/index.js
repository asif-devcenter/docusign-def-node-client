/**
 * Web Forms API version 1.1
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: devcenter@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AuthenticationMethod from './model/AuthenticationMethod';
import CreateInstanceRequestBody from './model/CreateInstanceRequestBody';
import HttpError from './model/HttpError';
import HttpSuccess from './model/HttpSuccess';
import InstanceSource from './model/InstanceSource';
import InstanceStatus from './model/InstanceStatus';
import TemplateProperties from './model/TemplateProperties';
import WebForm from './model/WebForm';
import WebFormComponentType from './model/WebFormComponentType';
import WebFormContent from './model/WebFormContent';
import WebFormInstance from './model/WebFormInstance';
import WebFormInstanceEnvelopesInner from './model/WebFormInstanceEnvelopesInner';
import WebFormInstanceList from './model/WebFormInstanceList';
import WebFormInstanceMetadata from './model/WebFormInstanceMetadata';
import WebFormMetadata from './model/WebFormMetadata';
import WebFormProperties from './model/WebFormProperties';
import WebFormSource from './model/WebFormSource';
import WebFormState from './model/WebFormState';
import WebFormSummary from './model/WebFormSummary';
import WebFormSummaryList from './model/WebFormSummaryList';
import WebFormUserInfo from './model/WebFormUserInfo';
import FormManagementApi from './api/FormManagementApi';


/**
* The Web Forms API facilitates generating semantic HTML forms around everyday contracts. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var WebFormsApiVersion11 = require('index'); // See note below*.
* var xxxSvc = new WebFormsApiVersion11.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new WebFormsApiVersion11.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new WebFormsApiVersion11.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new WebFormsApiVersion11.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.1.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AuthenticationMethod model constructor.
     * @property {module:model/AuthenticationMethod}
     */
    AuthenticationMethod,

    /**
     * The CreateInstanceRequestBody model constructor.
     * @property {module:model/CreateInstanceRequestBody}
     */
    CreateInstanceRequestBody,

    /**
     * The HttpError model constructor.
     * @property {module:model/HttpError}
     */
    HttpError,

    /**
     * The HttpSuccess model constructor.
     * @property {module:model/HttpSuccess}
     */
    HttpSuccess,

    /**
     * The InstanceSource model constructor.
     * @property {module:model/InstanceSource}
     */
    InstanceSource,

    /**
     * The InstanceStatus model constructor.
     * @property {module:model/InstanceStatus}
     */
    InstanceStatus,

    /**
     * The TemplateProperties model constructor.
     * @property {module:model/TemplateProperties}
     */
    TemplateProperties,

    /**
     * The WebForm model constructor.
     * @property {module:model/WebForm}
     */
    WebForm,

    /**
     * The WebFormComponentType model constructor.
     * @property {module:model/WebFormComponentType}
     */
    WebFormComponentType,

    /**
     * The WebFormContent model constructor.
     * @property {module:model/WebFormContent}
     */
    WebFormContent,

    /**
     * The WebFormInstance model constructor.
     * @property {module:model/WebFormInstance}
     */
    WebFormInstance,

    /**
     * The WebFormInstanceEnvelopesInner model constructor.
     * @property {module:model/WebFormInstanceEnvelopesInner}
     */
    WebFormInstanceEnvelopesInner,

    /**
     * The WebFormInstanceList model constructor.
     * @property {module:model/WebFormInstanceList}
     */
    WebFormInstanceList,

    /**
     * The WebFormInstanceMetadata model constructor.
     * @property {module:model/WebFormInstanceMetadata}
     */
    WebFormInstanceMetadata,

    /**
     * The WebFormMetadata model constructor.
     * @property {module:model/WebFormMetadata}
     */
    WebFormMetadata,

    /**
     * The WebFormProperties model constructor.
     * @property {module:model/WebFormProperties}
     */
    WebFormProperties,

    /**
     * The WebFormSource model constructor.
     * @property {module:model/WebFormSource}
     */
    WebFormSource,

    /**
     * The WebFormState model constructor.
     * @property {module:model/WebFormState}
     */
    WebFormState,

    /**
     * The WebFormSummary model constructor.
     * @property {module:model/WebFormSummary}
     */
    WebFormSummary,

    /**
     * The WebFormSummaryList model constructor.
     * @property {module:model/WebFormSummaryList}
     */
    WebFormSummaryList,

    /**
     * The WebFormUserInfo model constructor.
     * @property {module:model/WebFormUserInfo}
     */
    WebFormUserInfo,

    /**
    * The FormManagementApi service constructor.
    * @property {module:api/FormManagementApi}
    */
    FormManagementApi
};
