/**
 * Web Forms API version 1.1
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: devcenter@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TemplateProperties from './TemplateProperties';

/**
 * The WebFormContent model module.
 * @module model/WebFormContent
 * @version 1.1.0
 */
class WebFormContent {
    /**
     * Constructs a new <code>WebFormContent</code>.
     * Container for the components map used during configuration and data collection
     * @alias module:model/WebFormContent
     */
    constructor() { 
        
        WebFormContent.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebFormContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebFormContent} obj Optional instance to populate.
     * @return {module:model/WebFormContent} The populated <code>WebFormContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebFormContent();

            if (data.hasOwnProperty('components')) {
                obj['components'] = ApiClient.convertToType(data['components'], {'String': {'String': Object}});
            }
            if (data.hasOwnProperty('isStandalone')) {
                obj['isStandalone'] = ApiClient.convertToType(data['isStandalone'], 'Boolean');
            }
            if (data.hasOwnProperty('brandId')) {
                obj['brandId'] = ApiClient.convertToType(data['brandId'], 'String');
            }
            if (data.hasOwnProperty('templates')) {
                obj['templates'] = ApiClient.convertToType(data['templates'], [TemplateProperties]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebFormContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebFormContent</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['brandId'] && !(typeof data['brandId'] === 'string' || data['brandId'] instanceof String)) {
            throw new Error("Expected the field `brandId` to be a primitive type in the JSON string but got " + data['brandId']);
        }
        if (data['templates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['templates'])) {
                throw new Error("Expected the field `templates` to be an array in the JSON data but got " + data['templates']);
            }
            // validate the optional field `templates` (array)
            for (const item of data['templates']) {
                TemplateProperties.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Key/value dictionary of components that represent the form
 * @member {Object.<String, Object.<String, Object>>} components
 */
WebFormContent.prototype['components'] = undefined;

/**
 * Is the form a standalone form
 * @member {Boolean} isStandalone
 */
WebFormContent.prototype['isStandalone'] = undefined;

/**
 * Brand Id for web form
 * @member {String} brandId
 */
WebFormContent.prototype['brandId'] = undefined;

/**
 * Optional template information that will be used to seed the form.
 * @member {Array.<module:model/TemplateProperties>} templates
 */
WebFormContent.prototype['templates'] = undefined;






export default WebFormContent;

