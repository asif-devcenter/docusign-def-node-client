/**
 * Web Forms API version 1.1
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: devcenter@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WebFormMetadata from './WebFormMetadata';
import WebFormProperties from './WebFormProperties';
import WebFormState from './WebFormState';

/**
 * The WebFormSummary model module.
 * @module model/WebFormSummary
 * @version 1.1.0
 */
class WebFormSummary {
    /**
     * Constructs a new <code>WebFormSummary</code>.
     * An object that summarizes an instance of a form that can be used to display a listing
     * @alias module:model/WebFormSummary
     */
    constructor() { 
        
        WebFormSummary.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebFormSummary</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebFormSummary} obj Optional instance to populate.
     * @return {module:model/WebFormSummary} The populated <code>WebFormSummary</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebFormSummary();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('isPublished')) {
                obj['isPublished'] = ApiClient.convertToType(data['isPublished'], 'Boolean');
            }
            if (data.hasOwnProperty('isEnabled')) {
                obj['isEnabled'] = ApiClient.convertToType(data['isEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('hasDraftChanges')) {
                obj['hasDraftChanges'] = ApiClient.convertToType(data['hasDraftChanges'], 'Boolean');
            }
            if (data.hasOwnProperty('formState')) {
                obj['formState'] = WebFormState.constructFromObject(data['formState']);
            }
            if (data.hasOwnProperty('formProperties')) {
                obj['formProperties'] = WebFormProperties.constructFromObject(data['formProperties']);
            }
            if (data.hasOwnProperty('formMetadata')) {
                obj['formMetadata'] = WebFormMetadata.constructFromObject(data['formMetadata']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebFormSummary</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebFormSummary</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // validate the optional field `formProperties`
        if (data['formProperties']) { // data not null
          WebFormProperties.validateJSON(data['formProperties']);
        }
        // validate the optional field `formMetadata`
        if (data['formMetadata']) { // data not null
          WebFormMetadata.validateJSON(data['formMetadata']);
        }

        return true;
    }


}



/**
 * Unique identifier for a Web Form that is consistent for it's lifetime
 * @member {String} id
 */
WebFormSummary.prototype['id'] = undefined;

/**
 * Account identifier in which the web form resides
 * @member {String} accountId
 */
WebFormSummary.prototype['accountId'] = undefined;

/**
 * Has the form been published
 * @member {Boolean} isPublished
 */
WebFormSummary.prototype['isPublished'] = undefined;

/**
 * Is the form currently enabled and available for data collection
 * @member {Boolean} isEnabled
 */
WebFormSummary.prototype['isEnabled'] = undefined;

/**
 * Does the form have draft changes that need to be published?
 * @member {Boolean} hasDraftChanges
 */
WebFormSummary.prototype['hasDraftChanges'] = undefined;

/**
 * @member {module:model/WebFormState} formState
 */
WebFormSummary.prototype['formState'] = undefined;

/**
 * @member {module:model/WebFormProperties} formProperties
 */
WebFormSummary.prototype['formProperties'] = undefined;

/**
 * @member {module:model/WebFormMetadata} formMetadata
 */
WebFormSummary.prototype['formMetadata'] = undefined;






export default WebFormSummary;

