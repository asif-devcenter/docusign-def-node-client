/**
 * Web Forms API version 1.1
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: devcenter@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InstanceStatus from './InstanceStatus';
import WebFormInstanceEnvelopesInner from './WebFormInstanceEnvelopesInner';
import WebFormInstanceMetadata from './WebFormInstanceMetadata';

/**
 * The WebFormInstance model module.
 * @module model/WebFormInstance
 * @version 1.1.0
 */
class WebFormInstance {
    /**
     * Constructs a new <code>WebFormInstance</code>.
     * An object that contains the Web Form Instance required to render it  and its metadata such as created by, created time
     * @alias module:model/WebFormInstance
     * @param id {String} Unique identifier for a Web Form Instance that is consistent until its expiration
     */
    constructor(id) { 
        
        WebFormInstance.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>WebFormInstance</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebFormInstance} obj Optional instance to populate.
     * @return {module:model/WebFormInstance} The populated <code>WebFormInstance</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebFormInstance();

            if (data.hasOwnProperty('formUrl')) {
                obj['formUrl'] = ApiClient.convertToType(data['formUrl'], 'String');
            }
            if (data.hasOwnProperty('instanceToken')) {
                obj['instanceToken'] = ApiClient.convertToType(data['instanceToken'], 'String');
            }
            if (data.hasOwnProperty('tokenExpirationDateTime')) {
                obj['tokenExpirationDateTime'] = ApiClient.convertToType(data['tokenExpirationDateTime'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('formId')) {
                obj['formId'] = ApiClient.convertToType(data['formId'], 'String');
            }
            if (data.hasOwnProperty('accountId')) {
                obj['accountId'] = ApiClient.convertToType(data['accountId'], 'String');
            }
            if (data.hasOwnProperty('clientUserId')) {
                obj['clientUserId'] = ApiClient.convertToType(data['clientUserId'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = InstanceStatus.constructFromObject(data['status']);
            }
            if (data.hasOwnProperty('envelopes')) {
                obj['envelopes'] = ApiClient.convertToType(data['envelopes'], [WebFormInstanceEnvelopesInner]);
            }
            if (data.hasOwnProperty('instanceMetadata')) {
                obj['instanceMetadata'] = WebFormInstanceMetadata.constructFromObject(data['instanceMetadata']);
            }
            if (data.hasOwnProperty('formValues')) {
                obj['formValues'] = ApiClient.convertToType(data['formValues'], {'String': Object});
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebFormInstance</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebFormInstance</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of WebFormInstance.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['formUrl'] && !(typeof data['formUrl'] === 'string' || data['formUrl'] instanceof String)) {
            throw new Error("Expected the field `formUrl` to be a primitive type in the JSON string but got " + data['formUrl']);
        }
        // ensure the json data is a string
        if (data['instanceToken'] && !(typeof data['instanceToken'] === 'string' || data['instanceToken'] instanceof String)) {
            throw new Error("Expected the field `instanceToken` to be a primitive type in the JSON string but got " + data['instanceToken']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['formId'] && !(typeof data['formId'] === 'string' || data['formId'] instanceof String)) {
            throw new Error("Expected the field `formId` to be a primitive type in the JSON string but got " + data['formId']);
        }
        // ensure the json data is a string
        if (data['accountId'] && !(typeof data['accountId'] === 'string' || data['accountId'] instanceof String)) {
            throw new Error("Expected the field `accountId` to be a primitive type in the JSON string but got " + data['accountId']);
        }
        // ensure the json data is a string
        if (data['clientUserId'] && !(typeof data['clientUserId'] === 'string' || data['clientUserId'] instanceof String)) {
            throw new Error("Expected the field `clientUserId` to be a primitive type in the JSON string but got " + data['clientUserId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        if (data['envelopes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['envelopes'])) {
                throw new Error("Expected the field `envelopes` to be an array in the JSON data but got " + data['envelopes']);
            }
            // validate the optional field `envelopes` (array)
            for (const item of data['envelopes']) {
                WebFormInstanceEnvelopesInner.validateJSON(item);
            };
        }
        // validate the optional field `instanceMetadata`
        if (data['instanceMetadata']) { // data not null
          WebFormInstanceMetadata.validateJSON(data['instanceMetadata']);
        }

        return true;
    }


}

WebFormInstance.RequiredProperties = ["id"];

/**
 * The url used to render the web form instance.
 * @member {String} formUrl
 */
WebFormInstance.prototype['formUrl'] = undefined;

/**
 * Unique token associated with an instance that is required to render the form instance. This token is valid for 5 minutes after which it needs to be refreshed using refreshToken api
 * @member {String} instanceToken
 */
WebFormInstance.prototype['instanceToken'] = undefined;

/**
 * The datetime after which the token is expired and form instance is inaccessible.
 * @member {Date} tokenExpirationDateTime
 */
WebFormInstance.prototype['tokenExpirationDateTime'] = undefined;

/**
 * Unique identifier for a Web Form Instance that is consistent until its expiration
 * @member {String} id
 */
WebFormInstance.prototype['id'] = undefined;

/**
 * Unique identifier for a Web Form that is consistent for it's lifetime
 * @member {String} formId
 */
WebFormInstance.prototype['formId'] = undefined;

/**
 * Account identifier in which the web form resides
 * @member {String} accountId
 */
WebFormInstance.prototype['accountId'] = undefined;

/**
 * A unique identifier for a user that should originate from client's system. This value can be anything your backend system would use to track individual form instances. Examples include employee IDs, email addresses, surrogate key values, etc.
 * @member {String} clientUserId
 */
WebFormInstance.prototype['clientUserId'] = undefined;

/**
 * List of tags provided by the user with each request. This field is optional.
 * @member {Array.<String>} tags
 */
WebFormInstance.prototype['tags'] = undefined;

/**
 * @member {module:model/InstanceStatus} status
 */
WebFormInstance.prototype['status'] = undefined;

/**
 * The associated envelope that is created when the instance is submitted
 * @member {Array.<module:model/WebFormInstanceEnvelopesInner>} envelopes
 */
WebFormInstance.prototype['envelopes'] = undefined;

/**
 * @member {module:model/WebFormInstanceMetadata} instanceMetadata
 */
WebFormInstance.prototype['instanceMetadata'] = undefined;

/**
 * Key-value pairs (where key is the component name and value is the form value) used to create a form instance. For key of type TextBox, Email, Date, Select and RadioButtonGroup the value is of string type. For key of type Number, the value is of number type. For key of type of CheckboxGroup, the value is of type array of string.
 * @member {Object.<String, Object>} formValues
 */
WebFormInstance.prototype['formValues'] = undefined;






export default WebFormInstance;

