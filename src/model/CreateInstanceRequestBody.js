/**
 * Web Forms API version 1.1
 * The Web Forms API facilitates generating semantic HTML forms around everyday contracts. 
 *
 * The version of the OpenAPI document: 1.1.0
 * Contact: devcenter@docusign.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AuthenticationMethod from './AuthenticationMethod';

/**
 * The CreateInstanceRequestBody model module.
 * @module model/CreateInstanceRequestBody
 * @version 1.1.0
 */
class CreateInstanceRequestBody {
    /**
     * Constructs a new <code>CreateInstanceRequestBody</code>.
     * Request body containing properties that will be used to create instance.
     * @alias module:model/CreateInstanceRequestBody
     * @param clientUserId {String} A unique identifier for a user that should originate from client's system. This value can be anything your backend system would use to track individual form instances. Examples include employee IDs, email addresses, surrogate key values, etc.
     */
    constructor(clientUserId) { 
        
        CreateInstanceRequestBody.initialize(this, clientUserId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientUserId) { 
        obj['clientUserId'] = clientUserId;
    }

    /**
     * Constructs a <code>CreateInstanceRequestBody</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateInstanceRequestBody} obj Optional instance to populate.
     * @return {module:model/CreateInstanceRequestBody} The populated <code>CreateInstanceRequestBody</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateInstanceRequestBody();

            if (data.hasOwnProperty('formValues')) {
                obj['formValues'] = ApiClient.convertToType(data['formValues'], {'String': Object});
            }
            if (data.hasOwnProperty('clientUserId')) {
                obj['clientUserId'] = ApiClient.convertToType(data['clientUserId'], 'String');
            }
            if (data.hasOwnProperty('authenticationInstant')) {
                obj['authenticationInstant'] = ApiClient.convertToType(data['authenticationInstant'], 'String');
            }
            if (data.hasOwnProperty('authenticationMethod')) {
                obj['authenticationMethod'] = AuthenticationMethod.constructFromObject(data['authenticationMethod']);
            }
            if (data.hasOwnProperty('assertionId')) {
                obj['assertionId'] = ApiClient.convertToType(data['assertionId'], 'String');
            }
            if (data.hasOwnProperty('securityDomain')) {
                obj['securityDomain'] = ApiClient.convertToType(data['securityDomain'], 'String');
            }
            if (data.hasOwnProperty('returnUrl')) {
                obj['returnUrl'] = ApiClient.convertToType(data['returnUrl'], 'String');
            }
            if (data.hasOwnProperty('expirationOffset')) {
                obj['expirationOffset'] = ApiClient.convertToType(data['expirationOffset'], 'Number');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateInstanceRequestBody</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateInstanceRequestBody</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateInstanceRequestBody.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientUserId'] && !(typeof data['clientUserId'] === 'string' || data['clientUserId'] instanceof String)) {
            throw new Error("Expected the field `clientUserId` to be a primitive type in the JSON string but got " + data['clientUserId']);
        }
        // ensure the json data is a string
        if (data['authenticationInstant'] && !(typeof data['authenticationInstant'] === 'string' || data['authenticationInstant'] instanceof String)) {
            throw new Error("Expected the field `authenticationInstant` to be a primitive type in the JSON string but got " + data['authenticationInstant']);
        }
        // ensure the json data is a string
        if (data['assertionId'] && !(typeof data['assertionId'] === 'string' || data['assertionId'] instanceof String)) {
            throw new Error("Expected the field `assertionId` to be a primitive type in the JSON string but got " + data['assertionId']);
        }
        // ensure the json data is a string
        if (data['securityDomain'] && !(typeof data['securityDomain'] === 'string' || data['securityDomain'] instanceof String)) {
            throw new Error("Expected the field `securityDomain` to be a primitive type in the JSON string but got " + data['securityDomain']);
        }
        // ensure the json data is a string
        if (data['returnUrl'] && !(typeof data['returnUrl'] === 'string' || data['returnUrl'] instanceof String)) {
            throw new Error("Expected the field `returnUrl` to be a primitive type in the JSON string but got " + data['returnUrl']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}

CreateInstanceRequestBody.RequiredProperties = ["clientUserId"];

/**
 * Key-value pairs (where key is the component name and value is the form value) used to create a form instance. For key of type TextBox, Email, Date, Select and RadioButtonGroup the value is of string type. For key of type Number, the value is of number type. For key of type of CheckboxGroup, the value is of type array of string.
 * @member {Object.<String, Object>} formValues
 */
CreateInstanceRequestBody.prototype['formValues'] = undefined;

/**
 * A unique identifier for a user that should originate from client's system. This value can be anything your backend system would use to track individual form instances. Examples include employee IDs, email addresses, surrogate key values, etc.
 * @member {String} clientUserId
 */
CreateInstanceRequestBody.prototype['clientUserId'] = undefined;

/**
 * A sender-generated value that indicates the date and time that the signer was authenticated.
 * @member {String} authenticationInstant
 */
CreateInstanceRequestBody.prototype['authenticationInstant'] = undefined;

/**
 * @member {module:model/AuthenticationMethod} authenticationMethod
 */
CreateInstanceRequestBody.prototype['authenticationMethod'] = undefined;

/**
 * A unique identifier of the authentication event executed by the client application.
 * @member {String} assertionId
 */
CreateInstanceRequestBody.prototype['assertionId'] = undefined;

/**
 * The domain in which the user authenticated.
 * @member {String} securityDomain
 */
CreateInstanceRequestBody.prototype['securityDomain'] = undefined;

/**
 * The url to which the user is redirected after the signing is completed
 * @member {String} returnUrl
 */
CreateInstanceRequestBody.prototype['returnUrl'] = undefined;

/**
 * Specify the number of hours after which the form instance expires. For example, if the form expiration is set to 5 days, you should specify 120. The default value is 720 hours (30 days).
 * @member {Number} expirationOffset
 */
CreateInstanceRequestBody.prototype['expirationOffset'] = undefined;

/**
 * List of tags provided by the user with each request. This field is optional.
 * @member {Array.<String>} tags
 */
CreateInstanceRequestBody.prototype['tags'] = undefined;






export default CreateInstanceRequestBody;

